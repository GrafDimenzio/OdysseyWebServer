@page "/playerlist"
@implements IDisposable
@using Microsoft.AspNetCore.Authorization
@using OdysseyWebServer.Helper
@using OdysseyWebServer.ServerCommunication
@inject NavigationManager Navigation
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Player List - @Configuration.ServerName</PageTitle>

<h3>All Players</h3>

@if (_players == null)
{
    <p>Loading Player List</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-responsive">
            <thead>
            <tr>
                <th>Name</th>
                <th>Cap</th>
                <th>Body</th>
                <th>Position</th>
                <th>Map</th>
                <th>Tagged</th>
                <th>Capture</th>
                <th>2D</th>
                <th>IPv4</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var player in _players)
            {
            <tr @onclick="() => OnClickEntry(player.ID.ToString())">
                <td>@player.Name</td>
                <td><img src="@($"images/cap/{player.Costume.Cap}.png")" alt="@player.Costume.Cap" width="100" height="100"/></td>
                <td><img src="@($"images/body/{player.Costume.Body}.png")" alt="@player.Costume.Body" width="100" height="100"/></td>
                <td>
                    @player.Position.ToString()
                </td>
                <td>
                    @player.Kingdom
                    <br/>
                    @player.Stage
                    <br/>
                    @player.Scenario
                </td>
                <td>@player.Tagged</td>
                <td>
                    @if (!string.IsNullOrWhiteSpace(player.Capture))
                    {
                    <img  src="@($"images/capture/{player.Capture}.png")" alt="@player.Capture" width="100" height="100"/>
                    }
                </td>
                <td>@player.Is2D</td>
                <td>@player.IPv4</td>
            </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Player>? _players;

    protected override void OnInitialized()
    {
        UpdatePlayers(Cache.Players);
        Cache.OnUpdatePlayers += UpdatePlayers;
    }

    private void UpdatePlayers(List<Player> players)
    {
        InvokeAsync(() =>
        {
            _players = players;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Cache.OnUpdatePlayers -= UpdatePlayers;
    }

    private void OnClickEntry(string id)
    {
        Navigation.NavigateTo($"/player/{id}");
    }
}